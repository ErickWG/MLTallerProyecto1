import os
import logging
import oracledb
from contextlib import contextmanager
from datetime import datetime

logger = logging.getLogger(__name__)

# Configuración de Oracle obtenida desde variables de entorno
ORACLE_CONFIG = {
    "user": os.environ.get("ORACLE_USER"),
    "password": os.environ.get("ORACLE_PASSWORD"),
    "dsn": os.environ.get("ORACLE_DSN"),
}

oracle_pool = None


def inicializar_oracle_pool():
    """Inicializa el pool de conexiones de Oracle"""
    global oracle_pool
    try:
        oracle_pool = oracledb.create_pool(
            user=ORACLE_CONFIG["user"],
            password=ORACLE_CONFIG["password"],
            dsn=ORACLE_CONFIG["dsn"],
            min=2,
            max=10,
            increment=1,
        )
        logger.info("Pool de conexiones Oracle inicializado")
        return True
    except Exception as e:
        logger.error(f"Error inicializando Oracle: {e}")
        return False


@contextmanager
def get_oracle_connection():
    """Context manager para obtener conexión del pool"""
    connection = oracle_pool.acquire()
    connection.encoding = "UTF-8"
    connection.nencoding = "UTF-8"
    try:
        yield connection
    finally:
        oracle_pool.release(connection)


def crear_tablas_oracle():
    """Crea las tablas necesarias en Oracle si no existen"""
    sql_scripts = [
        """
        CREATE TABLE ALERTAS_FRAUDE (
            ID_ALERTA NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            FECHA_PROCESAMIENTO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FECHA_REGISTRO VARCHAR2(10),
            CODIGO_PAIS NUMBER,
            LINEA VARCHAR2(20),
            N_LLAMADAS NUMBER,
            N_MINUTOS NUMBER(10,2),
            N_DESTINOS NUMBER,
            SCORE_ANOMALIA NUMBER(10,4),
            UMBRAL NUMBER(10,4),
            TIPO_ANOMALIA VARCHAR2(50),
            TIPO_CONTEXTO VARCHAR2(50),
            RAZON_DECISION VARCHAR2(200),
            ARCHIVO_ORIGEN VARCHAR2(100),
            LOTE_PROCESAMIENTO VARCHAR2(50)
        )
        """,
        """
        CREATE TABLE LOTES_PROCESAMIENTO (
            ID_LOTE NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            TIMESTAMP_INICIO TIMESTAMP,
            TIMESTAMP_FIN TIMESTAMP,
            ARCHIVO_ENTRADA VARCHAR2(200),
            TOTAL_REGISTROS NUMBER,
            TOTAL_ANOMALIAS NUMBER,
            TASA_ANOMALIAS NUMBER(5,2),
            ARCHIVO_SALIDA VARCHAR2(200),
            ESTADO VARCHAR2(20),
            MENSAJE_ERROR VARCHAR2(500)
        )
        """,
        """
        CREATE TABLE HISTORICO_UMBRALES (
            ID_CAMBIO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            FECHA_CAMBIO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UMBRAL_ANTERIOR NUMBER(10,4),
            UMBRAL_NUEVO NUMBER(10,4),
            RAZON_CAMBIO VARCHAR2(200),
            USUARIO VARCHAR2(50)
        )
        """,
        """
        CREATE TABLE ACTUALIZACION_DIARIA_UMBRAL (
            ID_ACTUALIZACION NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            FECHA_EJECUCION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FECHA_DATOS DATE,
            ARCHIVO_ENTRADA VARCHAR2(200),
            TOTAL_REGISTROS NUMBER,
            REGISTROS_PROCESADOS NUMBER,
            PAISES_TOTALES NUMBER,
            PAISES_NUEVOS NUMBER,
            PAISES_ACTUALIZADOS NUMBER,
            UMBRAL_ANTERIOR NUMBER(10,4),
            N_TREES_ANTERIOR NUMBER,
            PAISES_CONOCIDOS_ANTERIOR NUMBER,
            UMBRAL_NUEVO NUMBER(10,4),
            N_TREES_NUEVO NUMBER,
            PAISES_CONOCIDOS_NUEVO NUMBER,
            PAISES_CON_CAMBIO_CATEGORIA NUMBER,
            DETALLE_CAMBIOS_CATEGORIA CLOB,
            TIEMPO_PROCESAMIENTO_SEG NUMBER(10,2),
            MEMORIA_USADA_MB NUMBER(10,2),
            ESTADO VARCHAR2(20),
            MENSAJE_ERROR VARCHAR2(500),
            ARCHIVO_BACKUP_CONFIG VARCHAR2(200),
            LLAMADAS_PROMEDIO_GLOBAL NUMBER(10,2),
            MINUTOS_PROMEDIO_GLOBAL NUMBER(10,2),
            DESTINOS_PROMEDIO_GLOBAL NUMBER(10,2),
            UMBRAL_MINUTOS_EXTREMOS NUMBER(10,2),
            PESO_SPRAY_RATIO NUMBER(10,2),
            OBSERVACIONES VARCHAR2(1000)
        )
        """,
        # Índices
        "CREATE INDEX IDX_ALERTAS_FECHA ON ALERTAS_FRAUDE(FECHA_PROCESAMIENTO)",
        "CREATE INDEX IDX_ALERTAS_PAIS ON ALERTAS_FRAUDE(CODIGO_PAIS)",
        "CREATE INDEX IDX_ALERTAS_LINEA ON ALERTAS_FRAUDE(LINEA)",
        "CREATE INDEX IDX_ALERTAS_TIPO ON ALERTAS_FRAUDE(TIPO_ANOMALIA)",
        "CREATE INDEX IDX_APRENDIZAJE_FECHA ON APRENDIZAJE_INCREMENTAL(FECHA_EJECUCION)",
        "CREATE INDEX IDX_APRENDIZAJE_ESTADO ON APRENDIZAJE_INCREMENTAL(ESTADO)"
    ]

    with get_oracle_connection() as conn:
        cursor = conn.cursor()
        for script in sql_scripts:
            try:
                cursor.execute(script)
                logger.info("Tabla/Índice creado exitosamente")
            except oracledb.DatabaseError as e:
                error, = e.args
                if error.code == 955:
                    logger.info("Tabla ya existe, continuando...")
                else:
                    logger.error(f"Error creando tabla: {e}")
                    raise
        conn.commit()
        logger.info("Todas las tablas creadas/verificadas exitosamente")


def guardar_anomalias_oracle(anomalias_df, archivo_origen, lote_id):
    """Guarda las anomalías detectadas en Oracle"""
    if anomalias_df.empty:
        return
    with get_oracle_connection() as conn:
        cursor = conn.cursor()
        datos_insertar = []
        for _, row in anomalias_df.iterrows():
            datos_insertar.append(
                (
                    row['FECHA'],
                    int(row['CODIGODEPAIS']),
                    row['LINEA'],
                    int(row['N_LLAMADAS']),
                    float(row['N_MINUTOS']),
                    int(row['N_DESTINOS']),
                    float(row['score_anomalia']),
                    float(row['umbral']),
                    row['tipo_anomalia'],
                    row['tipo_contexto'],
                    row['razon_decision'],
                    archivo_origen,
                    lote_id,
                )
            )
        insert_sql = """
            INSERT INTO ALERTAS_FRAUDE (
                FECHA_REGISTRO, CODIGO_PAIS, LINEA, N_LLAMADAS, N_MINUTOS,
                N_DESTINOS, SCORE_ANOMALIA, UMBRAL, TIPO_ANOMALIA,
                TIPO_CONTEXTO, RAZON_DECISION, ARCHIVO_ORIGEN, LOTE_PROCESAMIENTO
            ) VALUES (:1, :2, :3, :4, :5, :6, :7, :8, :9, :10, :11, :12, :13)
        """
        cursor.executemany(insert_sql, datos_insertar)
        conn.commit()
        logger.info(f"Se guardaron {len(datos_insertar)} anomalías en Oracle")


def registrar_lote_procesamiento(
    archivo_entrada,
    total_registros,
    total_anomalias,
    tasa_anomalias,
    archivo_salida,
    estado="COMPLETADO",
):
    """Registra información del lote procesado"""
    with get_oracle_connection() as conn:
        cursor = conn.cursor()
        insert_sql = """
            INSERT INTO LOTES_PROCESAMIENTO (
                TIMESTAMP_INICIO, TIMESTAMP_FIN, ARCHIVO_ENTRADA, TOTAL_REGISTROS,
                TOTAL_ANOMALIAS, TASA_ANOMALIAS, ARCHIVO_SALIDA, ESTADO
            ) VALUES (
                :1, :2, :3, :4, :5, :6, :7, :8
            ) RETURNING ID_LOTE INTO :id_lote
        """
        id_lote = cursor.var(oracledb.NUMBER)
        cursor.execute(
            insert_sql,
            [
                datetime.now(),
                datetime.now(),
                archivo_entrada,
                total_registros,
                total_anomalias,
                tasa_anomalias,
                archivo_salida,
                estado,
                id_lote,
            ],
        )
        conn.commit()
        return id_lote.getvalue()[0]

